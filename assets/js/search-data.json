{
  
    
        "post0": {
            "title": "Noisy evaluation",
            "content": "Meta-learning for noisy evaluation function: Reinforcement learning is prone to noise. It is harder to reproduce an experiment that trains a reinforcement learning agent. An agent can produce different results despite using the same seed for random number generator. Primary reasons are the following . Environment is stochastic. For the same action, state of the world and reward can be different | Agents with different initialization of weights produce different results | Parallel execution | Distributed training | Non-determinism from the ML framework | Stochastic optimizer Same input produces different output | . | Stochastic environment and agent (RL) Same set of actions produce different output | . | Sensitiveness to hyperparameters | . Noise in the agent&#39;s output impacts any meta-learning. I will demonstrate one example of noise when several parameters are tuned for cartpole reinforcement learning agent. . Application: cartpole agent . . # Install dependencies !pip install ray[rllib] pip install pyglet~=1.3.2 &gt; /dev/null 2&gt;&amp;1 pip install &#39;gym[atari]&#39; &gt; /dev/null 2&gt;&amp;1 #apt-get install python-opengl -y &gt; /dev/null 2&gt;&amp;1 #apt install xvfb -y &gt; /dev/null 2&gt;&amp;1 pip install pyvirtualdisplay &gt; /dev/null 2&gt;&amp;1 pip install tensorflow==2.0.0-beta0 &gt; /dev/null 2&gt;&amp;2 . Tune an RL agent . I use Ray Tune library to find optimal value for learning rate and share layers in the cartpole agent. . import ray from ray import tune import pandas as pd config = { &quot;env&quot;: &#39;CartPole-v0&#39;, &quot;num_workers&quot;: 2, &quot;vf_share_layers&quot;: tune.grid_search([True, False]), &quot;lr&quot;: tune.grid_search([1e-4, 1e-5, 1e-6]), &#39;seed&#39;: 91371 } results = tune.run( &#39;PPO&#39;, stop={ &#39;timesteps_total&#39;: 50000 }, config=config) df = results.dataframe() . To demonstrate noise, each trial are evaluated k=3 times. Results from a subset of the trials are plotted above. Note that the agent&#39;s output are different for the same parameter LR = 1e-5 and Shared_Layers=False. A custom agent is defined utilizing neural networks. It is optimized based on policy gradient. . Create a custom agent and environment . import tensorflow as tf from tensorflow.keras.layers import Dense, Flatten, Conv2D from tensorflow.keras import Model import numpy as np import gym class AgentMLPTF(Model): def __init__(self): super(AgentMLPTF, self).__init__() self.d1 = Dense(15, activation=&#39;tanh&#39;) self.d2 = Dense(2) def call(self, x): # 1. Define Policy batch = True if x.ndim == 1: batch = False x = np.expand_dims(x, axis=0) x = self.d1(x) action_logits = self.d2(x) # 2. Sample policy to get action action = tf.random.categorical(action_logits, 1) action = action.numpy().flatten() if not batch: action = np.asscalar(action) return {&quot;Action&quot;:action, &quot;LogProbability&quot;:action_logits} def get_episode_trajectory(env, agent, max_steps=1000): observation_list = [] reward_list = [] action_list = [] value_list = [] done = False obs = env.reset() for _ in range(max_steps): observation_list.append(obs) out = agent(obs) assert (&quot;Action&quot; in out), &quot;The key &#39;Action&#39; was missing from the agents output.&quot; action = out[&quot;Action&quot;] obs, rew, done, _, = env.step(action) reward_list.append(rew) action_list.append(action) if &quot;Value&quot; in out: value_list.append(out[&quot;Value&quot;]) if done: break ret = { &quot;Observations&quot;: observation_list, &quot;Actions&quot;: action_list, &quot;Rewards&quot;: np.array(reward_list, dtype=np.float32) } if len(value_list) &gt; 0: ret[&quot;Values&quot;] = value_list return ret def reward_to_go(rewards): return np.flip(np.cumsum(np.flip(rewards))) def train_policy_grad(env, agent, num_epochs=300): optimizer = tf.keras.optimizers.Adam(lr=1e-2) log_reward = 0 log_reward_list = [] logging_period = 20 for epoch in range(num_epochs): # get the training data traj = get_episode_trajectory(env, agent) obs = np.stack(traj[&quot;Observations&quot;]) rew = traj[&quot;Rewards&quot;] actions = traj[&quot;Actions&quot;] # compute &#39;reward-to-go&#39; rew_2_go = reward_to_go(rew) # compute gradients + update weights with tf.GradientTape() as tape: logits = agent(obs)[&quot;LogProbability&quot;] loss = loss_pg(actions, logits, rew_2_go) gradients = tape.gradient(loss, agent.trainable_variables) optimizer.apply_gradients(zip(gradients, agent.trainable_variables)) # log the reward log_reward += np.sum(rew) if (epoch % logging_period) == 0: template = &#39;Training Epoch {}, Averaged Return: {}&#39; print(template.format(epoch, log_reward / logging_period)) log_reward_list.append(log_reward / logging_period) log_reward = 0 return (range(0, num_epochs, logging_period), log_reward_list) #@title Answer { display-mode: &quot;form&quot; } def loss_pg(actions, log_probs, returns): action_masks = tf.one_hot(actions, 2, dtype=np.float64) log_probs = tf.reduce_sum(action_masks * tf.nn.log_softmax(log_probs), axis=1) return -tf.reduce_sum(returns * log_probs) # Note: this is equivalent to: def loss_pg2(actions, log_probs, returns): loss = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True, reduction=tf.keras.losses.Reduction.NONE) return tf.reduce_mean(returns * loss(actions, log_probs)) . import gym env_cartpole = gym.make(&#39;CartPole-v1&#39;) agent_mlp_tf = AgentMLPTF() (episodes, rewards) = train_policy_grad(env_cartpole, agent_mlp_tf) . There are various ways we can deal with noise in meta-learning. . Penalize parameters that produce output with high uncertainty or variability. | Resample parameters with higher uncertainty to reduce noise and increase quality of the meta-learner | . Algorithm: . Set $N$ = $NUM _SAMPLES$ | Run all individual $N$ times. Noisy feedbacks for $i$th individual: $f_{i}$ | . | Get Fitted individual based on: $ operatorname*{argmax}_i bar {f_{i}} + frac { sqrt{N}}{ sigma}$ | . Run all individuals min_sample times | Get Fitted individual based on: min(prob + sigma/sqrt(n)) | Repeat steps while no new individuals were sampled | Add a threshold for standard error | . NTBEA | paper | paper2 | paper3 | .",
            "url": "https://monirzaman.github.io/blog/2020/08/29/noisy-evaluation.html",
            "relUrl": "/2020/08/29/noisy-evaluation.html",
            "date": " • Aug 29, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "News representation from pretrained Sentence-BERT",
            "content": "toc: false | branch: master | badges: true | comments: true | categories: [bert, nlp] | image: | hide: true | search_exclude: true | metadata_key1: transformer | metadata_key2: nlp | . Pre-requisites: . Transformer (pip install transformers) | MulticoreTSNE (pip install MulticoreTSNE) | . %matplotlib inline import warnings warnings.simplefilter(action=&#39;ignore&#39;, category=FutureWarning) from matplotlib import pyplot as plt from typing import List from MulticoreTSNE import MulticoreTSNE as TSNE from transformers import AutoTokenizer, AutoModel from torch.nn import functional as F . Text representation . tokenizer = AutoTokenizer.from_pretrained(&#39;deepset/sentence_bert&#39;) model = AutoModel.from_pretrained(&#39;deepset/sentence_bert&#39;) def get_representation(texts: List[str]): inputs = tokenizer.batch_encode_plus(texts, return_tensors=&#39;pt&#39;, pad_to_max_length=True) input_ids = inputs[&#39;input_ids&#39;] attention_mask = inputs[&#39;attention_mask&#39;] output = model(input_ids, attention_mask=attention_mask)[0] sentence_rep = output.mean(dim=1) return sentence_rep . Visualize embedding . def plot_embedding(embedding, label=[], input_tensor=True, n_jobs=4): nar_embed = embedding.detach().numpy() reduced_embed = TSNE(n_jobs).fit_transform(nar_embed) vis_x = reduced_embed[:, 0] vis_y = reduced_embed[:, 1] plt.scatter(vis_x, vis_y, marker=&#39;.&#39;) # annotate with labels if label != []: i = 0 for x,y in zip(vis_x, vis_y): alabel = label[i] plt.annotate(alabel, # this is the text (x,y), # this is the point to label textcoords=&quot;offset points&quot;, # how to position the text xytext=(0,10), # distance from text to points (x,y) ha=&#39;center&#39;) # horizontal alignment can be left, right or center i += 1 plt.show() . # Example courtesy: https://github.com/UKPLab/sentence-transformers # Corpus with example sentences corpus = [&#39;A man is eating food.&#39;, &#39;A man is eating a piece of bread.&#39;, &#39;The girl is carrying a baby.&#39;, &#39;A man is riding a horse.&#39;, &#39;A woman is playing violin.&#39;, &#39;Two men pushed carts through the woods.&#39;, &#39;A man is riding a white horse on an enclosed ground.&#39;, &#39;A monkey is playing drums.&#39;, &#39;A cheetah is running behind its prey.&#39; ] # Query sentences: queries = [&#39;A man is eating pasta.&#39;, &#39;Someone in a gorilla costume is playing a set of drums.&#39;, &#39;A cheetah chases prey on across a field.&#39;] . encodings = get_representation(corpus) plot_embedding(encodings, corpus) . # Finding similarity of corpus[0] with corpus[1:] similarities = F.cosine_similarity(encodings[:1], encodings[1:]) closest = similarities.argsort(descending=True) for ind in closest: print(f&#39;label: {corpus[ind+1]} t similarity: {similarities[ind]}&#39;) . label: A man is eating a piece of bread. similarity: 0.6846261024475098 label: Two men pushed carts through the woods. similarity: 0.23186245560646057 label: A man is riding a horse. similarity: 0.2130296677350998 label: A man is riding a white horse on an enclosed ground. similarity: 0.19911333918571472 label: A monkey is playing drums. similarity: 0.06138730049133301 label: A cheetah is running behind its prey. similarity: -0.07709454745054245 label: A woman is playing violin. similarity: -0.11077538132667542 label: The girl is carrying a baby. similarity: -0.1298864632844925 . News embedding . news = [{ &quot;sports&quot; : &quot;&quot;&quot; The NBA has confirmed there will be no games for a third straight day but the play-offs will resume on Saturday. A host of US sports games were postponed after the Milwaukee Bucks chose not to play on Wednesday in protest at the shooting of Jacob Blake. Blake, a black man, was shot seven times in the back by police on Sunday in Kenosha, Wisconsin, near Milwaukee. The WNBA has said it will resume play on Friday having postponed all its games the previous two days. Sportshour podcast: The week the sporting world took action NBA commissioner Adam Silver and Michele Roberts, executive director of the players&#39; association NBPA, released a joint statement on Friday, saying there had been &quot;a candid, impassioned and productive conversation yesterday between NBA players, coaches and team governors regarding next steps to further our collective efforts and actions in support of social justice and racial equality&quot;. It added &quot;all parties agreed to resume&quot; play-off games on Saturday provided &quot;the league together with the players will work to enact the following commitments&quot;: The NBA and its players have agreed to immediately establish a social justice coalition, with representatives from players, coaches and governors. In every city where the league franchise owns and controls the arena property, team governors will continue to work with local elections officials to convert the facility into a voting location for the 2020 general election to allow for a safe in-person voting option for communities vulnerable to Covid. The league will work with the players and network partners to create and include advertising spots in each NBA play-off game dedicated to promoting greater civic engagement in national and local elections and raising awareness around voter access and opportunity. Game five of the Bucks&#39; series with Orlando Magic has been rescheduled for 20:30 BST on Saturday, followed by Oklahoma City Thunder&#39;s game with Houston Rockets and Los Angeles Lakers&#39; fixture with Portland Trail Blazers. Sunday&#39;s games begin with Boston Celtics facing Toronto Raptors at 18:00 BST, before LA Clippers play Dallas Mavericks and Utah Jazz take on Denver Nuggets. &quot;&quot;&quot;, }, { &quot;politics&quot;: &quot;&quot;&quot; Activists in Montreal have pulled down a statue of Canada&#39;s first prime minister Sir John A MacDonald, who was linked to cruel policies that killed many indigenous people in the late 19th Century. Video captured the moment the statue&#39;s head flew off and bounced on the pavement nearby. Quebec&#39;s head of government condemned it as &quot;unacceptable&quot;. &quot;Destroying parts of our history is not the solution,&quot; said François Legault. No arrests have been made, according to Canadian broadcaster CBC. MacDonald was prime minister of Canada for 19 years in the 1860s-1890s and is remembered for his nation-building policies but he also created the residential schools system. For more than a century the system forcibly removed at least 150,000 indigenous children from their homes and sent them to state-funded boarding schools. Many children were abused and some died, and they were were forbidden from speaking their own language or practising their culture. A government report in 2015 called the practice &quot;cultural genocide&quot;. He was accused of allowing famine and disease to kill many indigenous people and his government forced some First Nation communities to leave their traditional territories, withholding food until they did so. &quot;&quot;&quot; }, { &quot;sports&quot;: &quot;&quot;&quot; Alexander Kristoff timed his sprint finish to perfection to win the opening stage of the Tour de France in Nice. After a large group crashed inside the final 3km, Norwegian Kristoff, 33, surged home in a sprint also involving Ireland&#39;s Sam Bennett, who was fourth. Rain made the roads treacherous and led to several crashes, with Pavel Sivakov of Team Ineos twice coming off. Ineos&#39; defending champion Egan Bernal largely avoided the trouble and finished safely in the peloton. Colombia&#39;s Nairo Quintana crashed, while Astana&#39;s decision to up the pace on the final descent from Levens saw Miguel Angel Lopez slide into a road sign and prompted some stern exchanges towards the team from other riders in the peloton. Ineos&#39; Luke Rowe called Astana&#39;s move &quot;pretty stupid&quot;. &quot;I have to say &#39;chapeau&#39; to the whole peloton - minus Astana to hit it down one climb and, as a result, their leader was left on his back,&quot; the British rider said. France&#39;s Julian Alaphilippe was also caught in a crash, while compatriot Thibaut Pinot - one of the race favourites - fell heavily towards the end and rolled over the line with a ripped jersey. However, because the crash happened inside the final 3km, he was credited with the same time as the group he was riding with, so ended up losing no time on his rivals for the overall win. The riders face a 186km mountainous second stage on Sunday, with two climbs above 1,500m. &quot;&quot;&quot; } ] news_embedding = get_representation([n[list(n.keys())[0]] for n in news]) plot_embedding(news_embedding, label = [list(n.keys())[0] for n in news]) . Reference: . t-sne embed and tensorboard visualization | Text classification in Pytorch | Notebook on sentence-bert | .",
            "url": "https://monirzaman.github.io/blog/2020/08/29/news-representation.html",
            "relUrl": "/2020/08/29/news-representation.html",
            "date": " • Aug 29, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://monirzaman.github.io/blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://monirzaman.github.io/blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://monirzaman.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://monirzaman.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}